
{
	"scope": "source.lua",
	"completions": 
	[
		{ "trigger": "ccc3(r, g, b)", "contents": "ccc3(${1:r}, ${2:g}, ${3:b})" },
		{ "trigger": "ccc3BEqual(color3B_a, color3B_b)", "contents": "ccc3BEqual(${1:color3B_a}, ${2:color3B_b})" },
		{ "trigger": "ccc4(r, g, b, o)", "contents": "ccc4(${1:r}, ${2:g}, ${3:b}, ${4:o})" },
		{ "trigger": "ccc4FFromccc3B(color3B)", "contents": "ccc4FFromccc3B(${1:color3B})" },
		{ "trigger": "ccc4f(r, g, b, a)", "contents": "ccc4f(${1:r}, ${2:g}, ${3:b}, ${4:a})" },
		{ "trigger": "ccc4FFromccc4B(color4B)", "contents": "ccc4FFromccc4B(${1:color4B})" },
		{ "trigger": "ccc4BFromccc4F(color4F)", "contents": "ccc4BFromccc4F(${1:color4F})" },
		{ "trigger": "ccc4FEqual(color4F_a, color4F_b)", "contents": "ccc4FEqual(${1:color4F_a}, ${2:color4F_b})" },
		"kCCVerticalTextAlignmentTop",
		"kCCVerticalTextAlignmentCenter",
		"kCCVerticalTextAlignmentBottom",
		"kCCTextAlignmentLeft",
		"kCCTextAlignmentCenter",
		"kCCTextAlignmentRight",
		{ "trigger": "tolua.type(obj)", "contents": "tolua.type(${1:obj})" },
		{ "trigger": "tolua.cast(obj, type)", "contents": "tolua.cast(${1:obj}, ${2:type})" },
		{ "trigger": "tolua.isnull(obj)", "contents": "tolua.isnull(${1:obj})" },
		{ "trigger": "audio.getMusicVolume()", "contents": "audio.getMusicVolume()" },
		"audio.getBackgroundMusicVolume",
		{ "trigger": "audio.setMusicVolume(volume)", "contents": "audio.setMusicVolume(${1:volume})" },
		"audio.setBackgroundMusicVolume",
		{ "trigger": "audio.getSoundsVolume()", "contents": "audio.getSoundsVolume()" },
		"audio.getEffectsVolume",
		{ "trigger": "audio.setSoundsVolume(volume)", "contents": "audio.setSoundsVolume(${1:volume})" },
		"audio.setEffectsVolume",
		{ "trigger": "audio.preloadMusic(filename)", "contents": "audio.preloadMusic(${1:filename})" },
		"audio.preloadBackgroundMusic",
		{ "trigger": "audio.playMusic(filename, isLoop)", "contents": "audio.playMusic(${1:filename}, ${2:isLoop})" },
		"audio.playBackgroundMusic",
		{ "trigger": "audio.stopMusic(isReleaseData)", "contents": "audio.stopMusic(${1:isReleaseData})" },
		"audio.stopBackgroundMusic",
		{ "trigger": "audio.pauseMusic()", "contents": "audio.pauseMusic()" },
		"audio.pauseBackgroundMusic",
		{ "trigger": "audio.resumeMusic()", "contents": "audio.resumeMusic()" },
		"audio.resumeBackgroundMusic",
		{ "trigger": "audio.rewindMusic()", "contents": "audio.rewindMusic()" },
		"audio.rewindBackgroundMusic",
		{ "trigger": "audio.willPlayMusic()", "contents": "audio.willPlayMusic()" },
		"audio.willPlayBackgroundMusic",
		{ "trigger": "audio.isMusicPlaying()", "contents": "audio.isMusicPlaying()" },
		"audio.isBackgroundMusicPlaying",
		{ "trigger": "audio.playSound(filename, isLoop)", "contents": "audio.playSound(${1:filename}, ${2:isLoop})" },
		"audio.playEffect",
		{ "trigger": "audio.pauseSound(handle)", "contents": "audio.pauseSound(${1:handle})" },
		"audio.pauseEffect",
		{ "trigger": "audio.pauseAllSounds()", "contents": "audio.pauseAllSounds()" },
		"audio.pauseAllEffects",
		{ "trigger": "audio.resumeSound(handle)", "contents": "audio.resumeSound(${1:handle})" },
		"audio.resumeEffect",
		{ "trigger": "audio.resumeAllSounds(handle)", "contents": "audio.resumeAllSounds(${1:handle})" },
		"audio.resumeAllEffects",
		{ "trigger": "audio.stopSound(handle)", "contents": "audio.stopSound(${1:handle})" },
		"audio.stopEffect",
		{ "trigger": "audio.stopAllSounds()", "contents": "audio.stopAllSounds()" },
		"audio.stopAllEffects",
		{ "trigger": "audio.preloadSound(filename)", "contents": "audio.preloadSound(${1:filename})" },
		"audio.preloadEffect",
		{ "trigger": "audio.unloadSound(filename)", "contents": "audio.unloadSound(${1:filename})" },
		"audio.unloadEffect",
		{ "trigger": "crypto.encryptAES256(plaintext, key)", "contents": "crypto.encryptAES256(${1:plaintext}, ${2:key})" },
		{ "trigger": "crypto.decryptAES256(ciphertext, key)", "contents": "crypto.decryptAES256(${1:ciphertext}, ${2:key})" },
		{ "trigger": "crypto.encryptXXTEA(plaintext, key)", "contents": "crypto.encryptXXTEA(${1:plaintext}, ${2:key})" },
		{ "trigger": "crypto.decryptXXTEA(ciphertext, key)", "contents": "crypto.decryptXXTEA(${1:ciphertext}, ${2:key})" },
		{ "trigger": "crypto.encodeBase64(plaintext)", "contents": "crypto.encodeBase64(${1:plaintext})" },
		{ "trigger": "crypto.decodeBase64(ciphertext)", "contents": "crypto.decodeBase64(${1:ciphertext})" },
		{ "trigger": "crypto.md5(input, isRawOutput)", "contents": "crypto.md5(${1:input}, ${2:isRawOutput})" },
		{ "trigger": "echo(...)", "contents": "echo(${1:...})" },
		{ "trigger": "printf(fmt, ...)", "contents": "printf(${1:fmt}, ${2:...})" },
		{ "trigger": "echoError(fmt, ...)", "contents": "echoError(${1:fmt}, ${2:...})" },
		{ "trigger": "echoInfo(fmt, ...)", "contents": "echoInfo(${1:fmt}, ${2:...})" },
		{ "trigger": "echoLog(tag, fmt, ...)", "contents": "echoLog(${1:tag}, ${2:fmt}, ${3:...})" },
		{ "trigger": "dump(object, label, isReturnContents, nesting)", "contents": "dump(${1:object}, ${2:label}, ${3:isReturnContents}, ${4:nesting})" },
		{ "trigger": "vardump(object, label)", "contents": "vardump(${1:object}, ${2:label})" },
		{ "trigger": "display.newBackgroundSprite(filename)", "contents": "display.newBackgroundSprite(${1:filename})" },
		{ "trigger": "display.pixels(x, y)", "contents": "display.pixels(${1:x}, ${2:y})" },
		{ "trigger": "display.newBackgroundTilesSprite(filename)", "contents": "display.newBackgroundTilesSprite(${1:filename})" },
		{ "trigger": "display.newFrame(frameName)", "contents": "display.newFrame(${1:frameName})" },
		{ "trigger": "display.newSpriteWithFrame(frame, x, y)", "contents": "display.newSpriteWithFrame(${1:frame}, ${2:x}, ${3:y})" },
		{ "trigger": "display.newAnimate(animation)", "contents": "display.newAnimate(${1:animation})" },
		{ "trigger": "string.urlencodeChar(char)", "contents": "string.urlencodeChar(${1:char})" },
		{ "trigger": "CCNodeExtend:removeAction(action)", "contents": "CCNodeExtend:removeAction(${1:action})" },
		{ "trigger": "CCNodeExtend:numberOfRunningActions()", "contents": "CCNodeExtend:numberOfRunningActions()" },
		{ "trigger": "CCNodeExtend:registerNodeEvent(handler)", "contents": "CCNodeExtend:registerNodeEvent(${1:handler})" },
		{ "trigger": "CCLayerExtend:addScriptAccelerateHandler(...)", "contents": "CCLayerExtend:addScriptAccelerateHandler(${1:...})" },
		{ "trigger": "CCLayerExtend:removeScriptAccelerateListener()", "contents": "CCLayerExtend:removeScriptAccelerateListener()" },
		{ "trigger": "CCLayerExtend:registerScriptTouchHandler(...)", "contents": "CCLayerExtend:registerScriptTouchHandler(${1:...})" },
		{ "trigger": "CCLayerExtend:unregisterScriptTouchHandler()", "contents": "CCLayerExtend:unregisterScriptTouchHandler()" },
		{ "trigger": "CCLayerExtend:registerScriptKeypadHandler(...)", "contents": "CCLayerExtend:registerScriptKeypadHandler(${1:...})" },
		{ "trigger": "CCLayerExtend:unregisterScriptKeypadHandler()", "contents": "CCLayerExtend:unregisterScriptKeypadHandler()" },
		{ "trigger": "CCSceneExtend:addAutoCleanImage(filename)", "contents": "CCSceneExtend:addAutoCleanImage(${1:filename})" },
		"device.platform",
		"device.model",
		"device.language",
		"device.writablePath",
		"device.cachePath",
		"device.directorySeparator",
		"device.pathSeparator",
		{ "trigger": "device.showActivityIndicator()", "contents": "device.showActivityIndicator()" },
		{ "trigger": "device.hideActivityIndicator()", "contents": "device.hideActivityIndicator()" },
		{ "trigger": "device.showAlert(title, message, buttonLabels, listener)", "contents": "device.showAlert(${1:title}, ${2:message}, ${3:buttonLabels}, ${4:listener})" },
		{ "trigger": "device.cancelAlert()", "contents": "device.cancelAlert()" },
		{ "trigger": "device.getOpenUDID()", "contents": "device.getOpenUDID()" },
		{ "trigger": "device.openURL(url)", "contents": "device.openURL(${1:url})" },
		{ "trigger": "device.showInputBox(title, message, defaultValue)", "contents": "device.showInputBox(${1:title}, ${2:message}, ${3:defaultValue})" },
		"display.sizeInPixels",
		"display.contentScaleFactor",
		"display.size",
		"display.width",
		"display.height",
		"display.cx",
		"display.cy",
		"display.c_left",
		"display.c_right",
		"display.c_top",
		"display.c_bottom",
		"display.left",
		"display.right",
		"display.top",
		"display.bottom",
		"display.widthInPixels",
		"display.heightInPixels",
		"display.COLOR_WHITE",
		"display.COLOR_BLACK",
		"display.CENTER",
		"display.LEFT_TOP",
		"display.CENTER_TOP",
		"display.RIGHT_TOP",
		"display.CENTER_LEFT",
		"display.CENTER_RIGHT",
		"display.BOTTOM_LEFT",
		"display.BOTTOM_RIGHT",
		"display.BOTTOM_CENTER",
		"display.ANCHOR_POINTS",
		"display.SCENE_TRANSITIONS",
		"display.TEXTURES_PIXEL_FORMAT",
		{ "trigger": "display.newScene(name)", "contents": "display.newScene(${1:name})" },
		{ "trigger": "display.wrapSceneWithTransition(scene, transitionType, time, more)", "contents": "display.wrapSceneWithTransition(${1:scene}, ${2:transitionType}, ${3:time}, ${4:more})" },
		{ "trigger": "display.replaceScene(newScene, transitionType, time, more)", "contents": "display.replaceScene(${1:newScene}, ${2:transitionType}, ${3:time}, ${4:more})" },
		{ "trigger": "display.getRunningScene()", "contents": "display.getRunningScene()" },
		{ "trigger": "display.pause()", "contents": "display.pause()" },
		{ "trigger": "display.resume()", "contents": "display.resume()" },
		{ "trigger": "display.newLayer()", "contents": "display.newLayer()" },
		{ "trigger": "display.newNode()", "contents": "display.newNode()" },
		{ "trigger": "display.newClippingRegionNode(rect)", "contents": "display.newClippingRegionNode(${1:rect})" },
		{ "trigger": "display.newSprite(filename, x, y)", "contents": "display.newSprite(${1:filename}, ${2:x}, ${3:y})" },
		{ "trigger": "display.newScale9Sprite(filename, x, y, size)", "contents": "display.newScale9Sprite(${1:filename}, ${2:x}, ${3:y}, ${4:size})" },
		{ "trigger": "display.newTilesSprite(filename, rect)", "contents": "display.newTilesSprite(${1:filename}, ${2:rect})" },
		{ "trigger": "display.newCircle(radius)", "contents": "display.newCircle(${1:radius})" },
		{ "trigger": "display.newRect(width, height)", "contents": "display.newRect(${1:width}, ${2:height})" },
		{ "trigger": "display.newPolygon(points, scale)", "contents": "display.newPolygon(${1:points}, ${2:scale})" },
		{ "trigger": "display.align(target, anchorPoint, x, y)", "contents": "display.align(${1:target}, ${2:anchorPoint}, ${3:x}, ${4:y})" },
		{ "trigger": "display.addSpriteFramesWithFile(plistFilename, image)", "contents": "display.addSpriteFramesWithFile(${1:plistFilename}, ${2:image})" },
		{ "trigger": "display.removeSpriteFramesWithFile(plistFilename, imageName)", "contents": "display.removeSpriteFramesWithFile(${1:plistFilename}, ${2:imageName})" },
		{ "trigger": "display.setTexturePixelFormat(filename, format)", "contents": "display.setTexturePixelFormat(${1:filename}, ${2:format})" },
		{ "trigger": "display.removeSpriteFrameByImageName(imageName)", "contents": "display.removeSpriteFrameByImageName(${1:imageName})" },
		{ "trigger": "display.newBatchNode(image, capacity)", "contents": "display.newBatchNode(${1:image}, ${2:capacity})" },
		{ "trigger": "display.newSpriteFrame(frameName)", "contents": "display.newSpriteFrame(${1:frameName})" },
		{ "trigger": "display.newFrames(pattern, begin, length, isReversed)", "contents": "display.newFrames(${1:pattern}, ${2:begin}, ${3:length}, ${4:isReversed})" },
		{ "trigger": "display.newAnimation(frames, time)", "contents": "display.newAnimation(${1:frames}, ${2:time})" },
		{ "trigger": "display.setAnimationCache(name, animation)", "contents": "display.setAnimationCache(${1:name}, ${2:animation})" },
		{ "trigger": "display.getAnimationCache(name)", "contents": "display.getAnimationCache(${1:name})" },
		{ "trigger": "display.removeAnimationCache(name)", "contents": "display.removeAnimationCache(${1:name})" },
		{ "trigger": "display.removeUnusedSpriteFrames()", "contents": "display.removeUnusedSpriteFrames()" },
		"display.PROGRESS_TIMER_BAR",
		"display.PROGRESS_TIMER_RADIAL",
		{ "trigger": "display.newProgressTimer(image, progresssType)", "contents": "display.newProgressTimer(${1:image}, ${2:progresssType})" },
		{ "trigger": "tonumber(v, base)", "contents": "tonumber(${1:v}, ${2:base})" },
		{ "trigger": "toint(v)", "contents": "toint(${1:v})" },
		{ "trigger": "tobool(v)", "contents": "tobool(${1:v})" },
		{ "trigger": "totable(v)", "contents": "totable(${1:v})" },
		{ "trigger": "clone(object)", "contents": "clone(${1:object})" },
		{ "trigger": "class(classname, super)", "contents": "class(${1:classname}, ${2:super})" },
		{ "trigger": "import(moduleName, currentModuleName)", "contents": "import(${1:moduleName}, ${2:currentModuleName})" },
		{ "trigger": "handler(target, method)", "contents": "handler(${1:target}, ${2:method})" },
		{ "trigger": "math.round(num)", "contents": "math.round(${1:num})" },
		{ "trigger": "io.exists(path)", "contents": "io.exists(${1:path})" },
		{ "trigger": "io.readfile(path)", "contents": "io.readfile(${1:path})" },
		{ "trigger": "io.writefile(path, content, mode)", "contents": "io.writefile(${1:path}, ${2:content}, ${3:mode})" },
		{ "trigger": "io.pathinfo(path)", "contents": "io.pathinfo(${1:path})" },
		{ "trigger": "io.filesize(path)", "contents": "io.filesize(${1:path})" },
		{ "trigger": "table.nums(t)", "contents": "table.nums(${1:t})" },
		{ "trigger": "table.keys(t)", "contents": "table.keys(${1:t})" },
		{ "trigger": "table.values(t)", "contents": "table.values(${1:t})" },
		{ "trigger": "table.merge(dest, src)", "contents": "table.merge(${1:dest}, ${2:src})" },
		{ "trigger": "string.htmlspecialchars(input)", "contents": "string.htmlspecialchars(${1:input})" },
		{ "trigger": "string.nl2br(input)", "contents": "string.nl2br(${1:input})" },
		{ "trigger": "string.text2html(input)", "contents": "string.text2html(${1:input})" },
		{ "trigger": "string.split(str, delimiter)", "contents": "string.split(${1:str}, ${2:delimiter})" },
		{ "trigger": "string.ltrim(str)", "contents": "string.ltrim(${1:str})" },
		{ "trigger": "string.rtrim(str)", "contents": "string.rtrim(${1:str})" },
		{ "trigger": "string.trim(str)", "contents": "string.trim(${1:str})" },
		{ "trigger": "string.ucfirst(str)", "contents": "string.ucfirst(${1:str})" },
		{ "trigger": "string.urlencode(str)", "contents": "string.urlencode(${1:str})" },
		{ "trigger": "string.utf8len(str)", "contents": "string.utf8len(${1:str})" },
		{ "trigger": "string.formatNumberThousands(num)", "contents": "string.formatNumberThousands(${1:num})" },
		{ "trigger": "json.encode(var)", "contents": "json.encode(${1:var})" },
		{ "trigger": "json.decode(text)", "contents": "json.decode(${1:text})" },
		{ "trigger": "luaj.callStaticMethod(className, methodName, args, sig)", "contents": "luaj.callStaticMethod(${1:className}, ${2:methodName}, ${3:args}, ${4:sig})" },
		{ "trigger": "luaoc.callStaticMethod(className, methodName, args)", "contents": "luaoc.callStaticMethod(${1:className}, ${2:methodName}, ${3:args})" },
		{ "trigger": "network.isLocalWiFiAvailable()", "contents": "network.isLocalWiFiAvailable()" },
		{ "trigger": "network.isInternetConnectionAvailable()", "contents": "network.isInternetConnectionAvailable()" },
		{ "trigger": "network.isHostNameReachable(hostname)", "contents": "network.isHostNameReachable(${1:hostname})" },
		{ "trigger": "network.getInternetConnectionStatus()", "contents": "network.getInternetConnectionStatus()" },
		{ "trigger": "network.createHTTPRequest(callback, url, method)", "contents": "network.createHTTPRequest(${1:callback}, ${2:url}, ${3:method})" },
		{ "trigger": "scheduler.scheduleUpdateGlobal(listener)", "contents": "scheduler.scheduleUpdateGlobal(${1:listener})" },
		{ "trigger": "scheduler.scheduleGlobal(listener, interval)", "contents": "scheduler.scheduleGlobal(${1:listener}, ${2:interval})" },
		{ "trigger": "scheduler.unscheduleGlobal(handle)", "contents": "scheduler.unscheduleGlobal(${1:handle})" },
		{ "trigger": "scheduler.performWithDelayGlobal(listener, time)", "contents": "scheduler.performWithDelayGlobal(${1:listener}, ${2:time})" },
		{ "trigger": "transition.create(action, args)", "contents": "transition.create(${1:action}, ${2:args})" },
		{ "trigger": "transition.execute(target, action, args)", "contents": "transition.execute(${1:target}, ${2:action}, ${3:args})" },
		{ "trigger": "transition.rotateTo(target, args)", "contents": "transition.rotateTo(${1:target}, ${2:args})" },
		{ "trigger": "transition.moveTo(target, args)", "contents": "transition.moveTo(${1:target}, ${2:args})" },
		{ "trigger": "transition.moveBy(target, args)", "contents": "transition.moveBy(${1:target}, ${2:args})" },
		{ "trigger": "transition.fadeIn(target, args)", "contents": "transition.fadeIn(${1:target}, ${2:args})" },
		{ "trigger": "transition.fadeOut(target, args)", "contents": "transition.fadeOut(${1:target}, ${2:args})" },
		{ "trigger": "transition.fadeTo(target, args)", "contents": "transition.fadeTo(${1:target}, ${2:args})" },
		{ "trigger": "transition.scaleTo(target, args)", "contents": "transition.scaleTo(${1:target}, ${2:args})" },
		{ "trigger": "transition.sequence(actions)", "contents": "transition.sequence(${1:actions})" },
		{ "trigger": "transition.playAnimationOnce(target, animation, removeWhenFinished, onComplete, delay)", "contents": "transition.playAnimationOnce(${1:target}, ${2:animation}, ${3:removeWhenFinished}, ${4:onComplete}, ${5:delay})" },
		{ "trigger": "transition.playAnimationForever(target, animation, delay)", "contents": "transition.playAnimationForever(${1:target}, ${2:animation}, ${3:delay})" },
		{ "trigger": "transition.removeAction(action)", "contents": "transition.removeAction(${1:action})" },
		{ "trigger": "transition.stopTarget(target)", "contents": "transition.stopTarget(${1:target})" },
		{ "trigger": "transition.pauseTarget(target)", "contents": "transition.pauseTarget(${1:target})" },
		{ "trigger": "transition.resumeTarget(target)", "contents": "transition.resumeTarget(${1:target})" },
		"ui.DEFAULT_TTF_FONT",
		"ui.DEFAULT_TTF_FONT_SIZE",
		"ui.TEXT_ALIGN_LEFT",
		"ui.TEXT_ALIGN_CENTER",
		"ui.TEXT_ALIGN_RIGHT",
		"ui.TEXT_VALIGN_TOP",
		"ui.TEXT_VALIGN_CENTER",
		"ui.TEXT_VALIGN_BOTTOM",
		{ "trigger": "ui.newEditBox(params)", "contents": "ui.newEditBox(${1:params})" },
		{ "trigger": "ui.newMenu(items)", "contents": "ui.newMenu(${1:items})" },
		{ "trigger": "ui.newImageMenuItem(params)", "contents": "ui.newImageMenuItem(${1:params})" },
		{ "trigger": "ui.newTTFLabelMenuItem(params)", "contents": "ui.newTTFLabelMenuItem(${1:params})" },
		{ "trigger": "ui.newBMFontLabel(params)", "contents": "ui.newBMFontLabel(${1:params})" },
		{ "trigger": "ui.newTTFLabel(params)", "contents": "ui.newTTFLabel(${1:params})" },
		{ "trigger": "ui.newTTFLabelWithShadow(params)", "contents": "ui.newTTFLabelWithShadow(${1:params})" },
		{ "trigger": "ui.newTTFLabelWithOutline(params)", "contents": "ui.newTTFLabelWithOutline(${1:params})" },
		{ "trigger": "Context:ctor()", "contents": "Context:ctor()" },
		{ "trigger": "Context:get(key, defaultValue)", "contents": "Context:get(${1:key}, ${2:defaultValue})" },
		{ "trigger": "Context:set(key, value)", "contents": "Context:set(${1:key}, ${2:value})" },
		{ "trigger": "EventProtocol.extend(object)", "contents": "EventProtocol.extend(${1:object})" },
		{ "trigger": "GameNetwork.init(providerName, params)", "contents": "GameNetwork.init(${1:providerName}, ${2:params})" },
		{ "trigger": "GameNetwork.request(command, ...)", "contents": "GameNetwork.request(${1:command}, ${2:...})" },
		{ "trigger": "GameNetwork.show(command, ...)", "contents": "GameNetwork.show(${1:command}, ${2:...})" },
		{ "trigger": "GameNetwork.exit()", "contents": "GameNetwork.exit()" },
		"GameState.ERROR_INVALID_FILE_CONTENTS",
		"GameState.ERROR_HASH_MISS_MATCH",
		"GameState.ERROR_STATE_FILE_NOT_FOUND",
		{ "trigger": "GameState.init(eventListener_, stateFilename_, secretKey_)", "contents": "GameState.init(${1:eventListener_}, ${2:stateFilename_}, ${3:secretKey_})" },
		{ "trigger": "GameState.load()", "contents": "GameState.load()" },
		{ "trigger": "GameState.save(newValues)", "contents": "GameState.save(${1:newValues})" },
		{ "trigger": "GameState.getGameStatePath()", "contents": "GameState.getGameStatePath()" },
		"Localize.strings",
		{ "trigger": "Localize.loadStrings(strings)", "contents": "Localize.loadStrings(${1:strings})" },
		{ "trigger": "Localize.query(key, default)", "contents": "Localize.query(${1:key}, ${2:default})" },
		{ "trigger": "Localize.filename(filenameOrigin)", "contents": "Localize.filename(${1:filenameOrigin})" },
		{ "trigger": "Store.init(listener)", "contents": "Store.init(${1:listener})" },
		{ "trigger": "Store.getReceiptVerifyMode()", "contents": "Store.getReceiptVerifyMode()" },
		{ "trigger": "Store.setReceiptVerifyMode(mode, isSandbox)", "contents": "Store.setReceiptVerifyMode(${1:mode}, ${2:isSandbox})" },
		{ "trigger": "Store.getReceiptVerifyServerUrl()", "contents": "Store.getReceiptVerifyServerUrl()" },
		{ "trigger": "Store.setReceiptVerifyServerUrl(url)", "contents": "Store.setReceiptVerifyServerUrl(${1:url})" },
		{ "trigger": "Store.canMakePurchases()", "contents": "Store.canMakePurchases()" },
		{ "trigger": "Store.loadProducts(productsId, listener)", "contents": "Store.loadProducts(${1:productsId}, ${2:listener})" },
		{ "trigger": "Store.cancelLoadProducts()", "contents": "Store.cancelLoadProducts()" },
		{ "trigger": "Store.isProductLoaded(productId)", "contents": "Store.isProductLoaded(${1:productId})" },
		{ "trigger": "Store.purchase(productId)", "contents": "Store.purchase(${1:productId})" },
		{ "trigger": "Store.restore()", "contents": "Store.restore()" },
		{ "trigger": "Store.finishTransaction(transaction)", "contents": "Store.finishTransaction(${1:transaction})" },
		{ "trigger": "Timer.new()", "contents": "Timer.new()" },
		{ "trigger": "M.init(params)", "contents": "M.init(${1:params})" },
		{ "trigger": "M.request(name, params)", "contents": "M.request(${1:name}, ${2:params})" },
		{ "trigger": "M.show(name, params)", "contents": "M.show(${1:name}, ${2:params})" }
	]
}
